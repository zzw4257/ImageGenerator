// <auto-generated />
using System;
using ImageGenerator.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ImageGenerator.Migrations
{
    [DbContext(typeof(IgDbContext))]
    [Migration("20251024024817_AddPresetAuthenField")]
    partial class AddPresetAuthenField
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("GenerationRecordImage", b =>
                {
                    b.Property<Guid>("GenerationRecordId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("InputImagesId")
                        .HasColumnType("TEXT");

                    b.HasKey("GenerationRecordId", "InputImagesId");

                    b.HasIndex("InputImagesId");

                    b.ToTable("GenerationRecordImage");
                });

            modelBuilder.Entity("ImageGenerator.Models.Conversation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Conversations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("30000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            UpdatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            UserId = new Guid("10000000-0000-0000-0000-000000000001")
                        });
                });

            modelBuilder.Entity("ImageGenerator.Models.GenerationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConversationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("GenerationParams")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("GenerationType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("OutputImagesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("PresetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ConversationId");

                    b.HasIndex("OutputImagesId");

                    b.HasIndex("PresetId");

                    b.ToTable("GenerationRecords");
                });

            modelBuilder.Entity("ImageGenerator.Models.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("INTEGER");

                    b.Property<long>("Size")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ImageGenerator.Models.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("IssuerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("RemainingUses")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("IssuerId");

                    b.ToTable("Invitations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000001"),
                            Code = "WELCOME2024ABCDE",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IssuerId = new Guid("10000000-0000-0000-0000-000000000001"),
                            RemainingUses = 10
                        },
                        new
                        {
                            Id = new Guid("20000000-0000-0000-0000-000000000002"),
                            Code = "INVITE2024FGHIJK",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsDeleted = false,
                            IssuerId = new Guid("10000000-0000-0000-0000-000000000001"),
                            RemainingUses = 5
                        });
                });

            modelBuilder.Entity("ImageGenerator.Models.Preset", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("CoverUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("DefaultParams")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PriceCredits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.PrimitiveCollection<string>("Tags")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Presets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-00000000000a"),
                            CoverUrl = "/images/presets/product-shot.png",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = new Guid("10000000-0000-0000-0000-000000000001"),
                            DefaultParams = "{\"style\": \"photorealistic\", \"width\": 1024, \"height\": 1024, \"aspectRatio\": \"1:1\"}",
                            Description = "适合电商/广告用途的专业产品照片，强调光线布置、角度与核心细节。",
                            IsDeleted = false,
                            Name = "产品商业摄影 (Qwen)",
                            PriceCredits = 2,
                            Prompt = "A high-resolution, studio-lit product photograph of a [product description:matte black wireless earbud case] on a [background surface/description:brushed aluminum surface with soft vignette]. The lighting is a [lighting setup:three-point softbox] to [lighting purpose:emphasize subtle curves]. The camera angle is a [angle type:slight low angle] to showcase [specific feature:charging indicator + hinge]. Ultra-realistic, with sharp focus on [key detail:texture + logo etching]. [Aspect ratio:1:1].",
                            Provider = "Qwen",
                            Tags = "[\"product\",\"studio\",\"qwen\"]"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-00000000000b"),
                            CoverUrl = "/images/presets/text-graphic.png",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = new Guid("10000000-0000-0000-0000-000000000001"),
                            DefaultParams = "{\"style\": \"graphic\", \"width\": 768, \"height\": 768, \"aspectRatio\": \"1:1\"}",
                            Description = "用于生成包含特定文字的图形 / 标识，明确字体感受、风格与配色。",
                            IsDeleted = false,
                            Name = "文字图形标识 (Flux)",
                            PriceCredits = 1,
                            Prompt = "Create a [image type:logo badge] for [brand/concept:Arctic Labs] with the text \"[text to render:POLAR AI]\" in a [font style:geometric sans-serif]. The design should be [style description:minimal, futuristic] with a [color scheme:icy blue + white gradient].",
                            Provider = "Flux",
                            Tags = "[\"text\",\"logo\",\"graphic\",\"flux\"]"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-00000000000c"),
                            CoverUrl = "/images/presets/sticker.png",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = new Guid("10000000-0000-0000-0000-000000000001"),
                            DefaultParams = "{\"style\": \"sticker\", \"width\": 512, \"height\": 512, \"aspectRatio\": \"1:1\"}",
                            Description = "用于创建带有指定风格的贴纸 / 图标素材，强调线条、配色与透明背景。",
                            IsDeleted = false,
                            Name = "风格化贴纸 (Stub)",
                            PriceCredits = 0,
                            Prompt = "A [style:kawaii chibi] sticker of a [subject:cat astronaut], featuring [key characteristics:round helmet, floating fish] and a [color palette:pastel neon mix]. The design should have [line style:clean bold outline] and [shading style:soft cell shading]. The background must be transparent.",
                            Provider = "Stub",
                            Tags = "[\"sticker\",\"chibi\",\"icon\",\"stub\"]"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-00000000000d"),
                            CoverUrl = "/images/presets/photorealistic.png",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = new Guid("10000000-0000-0000-0000-000000000001"),
                            DefaultParams = "{\"style\": \"photorealistic\", \"width\": 1024, \"height\": 576, \"aspectRatio\": \"16:9\"}",
                            Description = "对于逼真的图片，请使用摄影术语。提及拍摄角度、镜头类型、光线和细节，引导模型生成逼真的效果。",
                            IsDeleted = false,
                            Name = "逼真摄影场景 (Qwen)",
                            PriceCredits = 2,
                            Prompt = "A photorealistic [shot type:close-up] of [subject:a mystical fox], [action or expression:looking into the distance], set in [environment:ancient forest]. The scene is illuminated by [lighting description:soft golden hour rim light], creating a [mood:serene] atmosphere. Captured with a [camera/lens details:Canon EOS R5 + 85mm f1.2], emphasizing [key textures and details:detailed fur, shimmering particles]. The image should be in a [aspect ratio:16:9] format.",
                            Provider = "Qwen",
                            Tags = "[\"photo\",\"realistic\",\"camera\",\"qwen\"]"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-00000000000e"),
                            CoverUrl = "/images/presets/minimal.png",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = new Guid("10000000-0000-0000-0000-000000000001"),
                            DefaultParams = "{\"style\": \"minimalist\", \"width\": 768, \"height\": 512, \"aspectRatio\": \"3:2\"}",
                            Description = "生成带大量留白与单主体的极简风图像，适合做背景或叠加文案。",
                            IsDeleted = false,
                            Name = "极简负空间 (Flux)",
                            PriceCredits = 1,
                            Prompt = "A minimalist composition featuring a single [subject:solitary bonsai] positioned in the [position in frame:lower right] of the frame. The background is a vast, empty [color:off-white] canvas, creating significant negative space. Soft, subtle lighting. [Aspect ratio:3:2].",
                            Provider = "Flux",
                            Tags = "[\"minimalist\",\"art\",\"negative space\",\"flux\"]"
                        },
                        new
                        {
                            Id = new Guid("40000000-0000-0000-0000-00000000000f"),
                            CoverUrl = "/images/presets/comic.png",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedByUserId = new Guid("10000000-0000-0000-0000-000000000001"),
                            DefaultParams = "{\"style\": \"comic\", \"width\": 512, \"height\": 910, \"aspectRatio\": \"9:16\"}",
                            Description = "生成漫画风单格场景，分离前景角色动作与背景设定，可含对白框。",
                            IsDeleted = false,
                            Name = "漫画单格 (Stub)",
                            PriceCredits = 0,
                            Prompt = "A single comic book panel in a [art style:neo-noir ink wash] style. In the foreground, [character description and action:detective leaning over a glowing map]. In the background, [setting details:rain streaked window + neon signs]. The panel has a [dialogue/caption box:caption] with the text \"[Text:We were already too late]\". The lighting creates a [mood:brooding] mood. [Aspect ratio:9:16].",
                            Provider = "Stub",
                            Tags = "[\"comic\",\"noir\",\"storyboard\",\"stub\"]"
                        });
                });

            modelBuilder.Entity("ImageGenerator.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ImageGenerator.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Credits")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("InvitedById")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastCreditClaimedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Salt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("InvitedById");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000001"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Credits = 100m,
                            IsDeleted = false,
                            LastCreditClaimedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Password = "C0FC41A30BEB7C221BB9CB69DF665943ED9F425211FFB8EFA9B5091F7C0BC7F1",
                            Salt = "admin-salt-123",
                            Username = "admin"
                        },
                        new
                        {
                            Id = new Guid("10000000-0000-0000-0000-000000000002"),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Credits = 100m,
                            IsDeleted = false,
                            LastCreditClaimedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Password = "F64FFCA00480CB9155C0D068E8B11077291CAABF38DF01E130A8941F8E591C1A",
                            Salt = "tester-salt-456",
                            Username = "tester"
                        });
                });

            modelBuilder.Entity("GenerationRecordImage", b =>
                {
                    b.HasOne("ImageGenerator.Models.GenerationRecord", null)
                        .WithMany()
                        .HasForeignKey("GenerationRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageGenerator.Models.Image", null)
                        .WithMany()
                        .HasForeignKey("InputImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImageGenerator.Models.Conversation", b =>
                {
                    b.HasOne("ImageGenerator.Models.User", "User")
                        .WithMany("Conversations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageGenerator.Models.GenerationRecord", b =>
                {
                    b.HasOne("ImageGenerator.Models.Conversation", "Conversation")
                        .WithMany("GenerationRecords")
                        .HasForeignKey("ConversationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImageGenerator.Models.Image", "OutputImages")
                        .WithMany()
                        .HasForeignKey("OutputImagesId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ImageGenerator.Models.Preset", "Preset")
                        .WithMany("GenerationRecords")
                        .HasForeignKey("PresetId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Conversation");

                    b.Navigation("OutputImages");

                    b.Navigation("Preset");
                });

            modelBuilder.Entity("ImageGenerator.Models.Image", b =>
                {
                    b.HasOne("ImageGenerator.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ImageGenerator.Models.Invitation", b =>
                {
                    b.HasOne("ImageGenerator.Models.User", "Issuer")
                        .WithMany()
                        .HasForeignKey("IssuerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Issuer");
                });

            modelBuilder.Entity("ImageGenerator.Models.Preset", b =>
                {
                    b.HasOne("ImageGenerator.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("ImageGenerator.Models.Transaction", b =>
                {
                    b.HasOne("ImageGenerator.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ImageGenerator.Models.User", b =>
                {
                    b.HasOne("ImageGenerator.Models.Invitation", "InvitedBy")
                        .WithMany()
                        .HasForeignKey("InvitedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("InvitedBy");
                });

            modelBuilder.Entity("ImageGenerator.Models.Conversation", b =>
                {
                    b.Navigation("GenerationRecords");
                });

            modelBuilder.Entity("ImageGenerator.Models.Preset", b =>
                {
                    b.Navigation("GenerationRecords");
                });

            modelBuilder.Entity("ImageGenerator.Models.User", b =>
                {
                    b.Navigation("Conversations");
                });
#pragma warning restore 612, 618
        }
    }
}
