/* eslint-disable */
/* prettier-ignore */
// @ts-nocheck
// Generated by unplugin-vue-router. ‼️ DO NOT MODIFY THIS FILE ‼️
// It's recommended to commit this file.
// Make sure to add this file to your tsconfig.json file as an "includes" or "files" entry.

declare module 'vue-router/auto-routes' {
  import type {
    RouteRecordInfo,
    ParamValue,
    ParamValueOneOrMore,
    ParamValueZeroOrMore,
    ParamValueZeroOrOne,
  } from 'vue-router'

  /**
   * Route name map generated by unplugin-vue-router
   */
  export interface RouteNamedMap {
    '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>,
    '/account': RouteRecordInfo<'/account', '/account', Record<never, never>, Record<never, never>>,
    '/analytics': RouteRecordInfo<'/analytics', '/analytics', Record<never, never>, Record<never, never>>,
    '/community': RouteRecordInfo<'/community', '/community', Record<never, never>, Record<never, never>>,
    '/conversation/[id]': RouteRecordInfo<'/conversation/[id]', '/conversation/:id', { id: ParamValue<true> }, { id: ParamValue<false> }>,
    '/enterprise': RouteRecordInfo<'/enterprise', '/enterprise', Record<never, never>, Record<never, never>>,
    '/favorites': RouteRecordInfo<'/favorites', '/favorites', Record<never, never>, Record<never, never>>,
    '/generate': RouteRecordInfo<'/generate', '/generate', Record<never, never>, Record<never, never>>,
    '/help': RouteRecordInfo<'/help', '/help', Record<never, never>, Record<never, never>>,
    '/history': RouteRecordInfo<'/history', '/history', Record<never, never>, Record<never, never>>,
    '/home': RouteRecordInfo<'/home', '/home', Record<never, never>, Record<never, never>>,
    '/invitation': RouteRecordInfo<'/invitation', '/invitation', Record<never, never>, Record<never, never>>,
    '/landing': RouteRecordInfo<'/landing', '/landing', Record<never, never>, Record<never, never>>,
    '/login': RouteRecordInfo<'/login', '/login', Record<never, never>, Record<never, never>>,
    '/market': RouteRecordInfo<'/market', '/market', Record<never, never>, Record<never, never>>,
    '/presets': RouteRecordInfo<'/presets', '/presets', Record<never, never>, Record<never, never>>,
    '/pricing': RouteRecordInfo<'/pricing', '/pricing', Record<never, never>, Record<never, never>>,
    '/profile': RouteRecordInfo<'/profile', '/profile', Record<never, never>, Record<never, never>>,
    '/recharge': RouteRecordInfo<'/recharge', '/recharge', Record<never, never>, Record<never, never>>,
    '/register': RouteRecordInfo<'/register', '/register', Record<never, never>, Record<never, never>>,
    '/settings': RouteRecordInfo<'/settings', '/settings', Record<never, never>, Record<never, never>>,
    '/templates': RouteRecordInfo<'/templates', '/templates', Record<never, never>, Record<never, never>>,
    '/workflow-editor': RouteRecordInfo<'/workflow-editor', '/workflow-editor', Record<never, never>, Record<never, never>>,
  }

  /**
   * Route file to route info map by unplugin-vue-router.
   * Used by the volar plugin to automatically type useRoute()
   *
   * Each key is a file path relative to the project root with 2 properties:
   * - routes: union of route names of the possible routes when in this page (passed to useRoute<...>())
   * - views: names of nested views (can be passed to <RouterView name="...">)
   *
   * @internal
   */
  export interface _RouteFileInfoMap {
    'src/pages/index.vue': {
      routes: '/'
      views: never
    }
    'src/pages/account.vue': {
      routes: '/account'
      views: never
    }
    'src/pages/analytics.vue': {
      routes: '/analytics'
      views: never
    }
    'src/pages/community.vue': {
      routes: '/community'
      views: never
    }
    'src/pages/conversation/[id].vue': {
      routes: '/conversation/[id]'
      views: never
    }
    'src/pages/enterprise.vue': {
      routes: '/enterprise'
      views: never
    }
    'src/pages/favorites.vue': {
      routes: '/favorites'
      views: never
    }
    'src/pages/generate.vue': {
      routes: '/generate'
      views: never
    }
    'src/pages/help.vue': {
      routes: '/help'
      views: never
    }
    'src/pages/history.vue': {
      routes: '/history'
      views: never
    }
    'src/pages/home.vue': {
      routes: '/home'
      views: never
    }
    'src/pages/invitation.vue': {
      routes: '/invitation'
      views: never
    }
    'src/pages/landing.vue': {
      routes: '/landing'
      views: never
    }
    'src/pages/login.vue': {
      routes: '/login'
      views: never
    }
    'src/pages/market.vue': {
      routes: '/market'
      views: never
    }
    'src/pages/presets.vue': {
      routes: '/presets'
      views: never
    }
    'src/pages/pricing.vue': {
      routes: '/pricing'
      views: never
    }
    'src/pages/profile.vue': {
      routes: '/profile'
      views: never
    }
    'src/pages/recharge.vue': {
      routes: '/recharge'
      views: never
    }
    'src/pages/register.vue': {
      routes: '/register'
      views: never
    }
    'src/pages/settings.vue': {
      routes: '/settings'
      views: never
    }
    'src/pages/templates.vue': {
      routes: '/templates'
      views: never
    }
    'src/pages/workflow-editor.vue': {
      routes: '/workflow-editor'
      views: never
    }
  }

  /**
   * Get a union of possible route names in a certain route component file.
   * Used by the volar plugin to automatically type useRoute()
   *
   * @internal
   */
  export type _RouteNamesForFilePath<FilePath extends string> =
    _RouteFileInfoMap extends Record<FilePath, infer Info>
      ? Info['routes']
      : keyof RouteNamedMap
}
